// SPDX-License-Identifier: GPL-3.0
pragma solidity 0.8.18;
contract requireStatement {
// Defining function to check input
function checkInput(uint _input) public view returns(string memory)
{
require(_input >= 0, "invalid uint8");
require(_input <= 255, "invalid uint8");
return "Input is Uint8";
}
function Odd(uint _input) public view returns(bool)
{
require(_input % 2 != 0);
return true;
}
}

contract eventExample {
uint256 public value = 0;
event Increment(address owner);
function getValue(uint _a, uint _b) public {
emit Increment(msg.sender);
value = _a + _b;
}
}

contract Constructors 
{ 
string str; 
constructor() 
 { 
 str = "Vignesh"; 
 } 
 function getValue() public view returns(string memory) 
 { 
 return str; 
 } 
}

contract parent 
{ 
uint internal sum; 
 function setValue() external 
 { 
 uint a = 10; 
uint b = 20; 
sum = a + b; 
 } 
} 

contract child is parent 
{ 
 function getValue() external view returns(uint) 
 { 
 return sum; 
 } 
} 
contract caller 
{ 
 child cc = new child(); 
 function testInheritance() public 
 { 
 cc.setValue(); 
 } 
 function result() public view returns (uint) 
 { 
 return cc.getValue(); 
 } 
}
