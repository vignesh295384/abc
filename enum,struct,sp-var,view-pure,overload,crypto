// SPDX-License-Identifier: GPL-3.0
pragma solidity 0.8.18;
contract Enums { 
 enum months 
 { 
 Jan,Feb,Mar,Apr,May,June,Jul,Aug,Sep,Oct,Nov,Dec 
 } 
 months month; 
function setenumvalue() public 
 { 
 month=months.Sep; 
 } 
 function getenumvalue() public view returns (months) 
 { 
 return month; 
 } 
}

contract Structs {  #struct
 struct Employee { 
 string name; 
string empid; 
 int age; 
 } 
 Employee emp1; 
 function setstructsvalue() public 
 { 
 emp1=Employee("Vignesh","5",22); 
 } 
 function getstructvalue() public view returns (string memory,string 
memory,int) { 
return (emp1.name,emp1.empid,emp1.age);
 } }

contract SpecialVariables 
{ 
uint data1=0; 
uint data2=0; 
uint data3=0; 
function set() public 
 { 
 data1=block.difficulty; 
data2=block.timestamp; 
data3=block.number; 
 } 
 function get() public view returns (uint, uint, uint) 
 { 
 return(data1, data2, data3); 
 } 
} 

contract ViewAndPure 
{ 
uint public num; 
function viewFunction1() public view returns(uint) 
 { 
 return num; 
 } 
 function pureFunction1() public pure returns(uint) 
 { 
 return 10; 
 } 
 function viewFunction2(uint x) public view returns(uint) 
 { 
 return num+x; 
 } 
 function pureFunction2(uint x, uint y) public pure returns(uint) 
 { 
 return x+y; 
 } 
}

contract FunctionOverloading 
{ 
function getSum(uint a, uint b) public pure returns(uint){ 
 return a + b; 
 } 
 function getSum(uint a, uint b, uint c) public pure returns(uint){ 
 return a + b + c; 
 } 
 function callSumWithTwoArguments() public pure returns(uint){ 
return getSum(10,20); 
 } 
 function callSumWithThreeArguments() public pure returns(uint){ 
return getSum(10,20,30); 
 } 
}

contract CryptographicFunctions 
{ 
function callKeccak256() public pure returns(bytes32 result) 
 { 
 return keccak256("ABC"); 
 } 
 function callsha256() public pure returns(bytes32 result) 
 { 
 return sha256("ABC"); 
 } 
 function callripemd160() public pure returns(bytes32 result) 
 { 
 return ripemd160("ABC"); 
 } 
}


